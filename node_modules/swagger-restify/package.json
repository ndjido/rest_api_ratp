{
  "_args": [
    [
      {
        "raw": "vellotis/swagger-restify",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "vellotis/swagger-restify",
        "spec": "github:vellotis/swagger-restify",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:vellotis/swagger-restify.git",
          "sshUrl": "git+ssh://git@github.com/vellotis/swagger-restify.git",
          "httpsUrl": "git+https://github.com/vellotis/swagger-restify.git",
          "gitUrl": "git://github.com/vellotis/swagger-restify.git",
          "shortcut": "github:vellotis/swagger-restify",
          "directUrl": "https://raw.githubusercontent.com/vellotis/swagger-restify/master/package.json"
        }
      },
      "/Users/yvanbarbaria/Dev/rest_api_ratp"
    ]
  ],
  "_from": "vellotis/swagger-restify",
  "_id": "swagger-restify@1.1.1",
  "_inCache": true,
  "_location": "/swagger-restify",
  "_phantomChildren": {
    "backoff": "2.5.0",
    "bunyan": "1.8.12",
    "csv-parse": "1.2.1",
    "ctype": "0.5.3",
    "deep-equal": "0.2.2",
    "escape-regexp-component": "1.0.2",
    "formidable": "1.1.1",
    "keep-alive-agent": "0.0.1",
    "mime": "1.4.0",
    "once": "1.4.0",
    "stream-transform": "0.1.2",
    "verror": "1.10.0"
  },
  "_requested": {
    "raw": "vellotis/swagger-restify",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "vellotis/swagger-restify",
    "spec": "github:vellotis/swagger-restify",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:vellotis/swagger-restify.git",
      "sshUrl": "git+ssh://git@github.com/vellotis/swagger-restify.git",
      "httpsUrl": "git+https://github.com/vellotis/swagger-restify.git",
      "gitUrl": "git://github.com/vellotis/swagger-restify.git",
      "shortcut": "github:vellotis/swagger-restify",
      "directUrl": "https://raw.githubusercontent.com/vellotis/swagger-restify/master/package.json"
    }
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "git://github.com/vellotis/swagger-restify.git#92c50f33657acffb3173ff4125a2890dc28a016b",
  "_shasum": "3c2802e2def84adc9482b22f654432a3cec4f77e",
  "_shrinkwrap": null,
  "_spec": "vellotis/swagger-restify",
  "_where": "/Users/yvanbarbaria/Dev/rest_api_ratp",
  "author": {
    "name": "fliptoo",
    "email": "fliptoo.studio@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/yourdelivery/swagger-restify/issues"
  },
  "dependencies": {
    "async": "~0.2.7",
    "coffee-script": "*",
    "doctrine": "*",
    "js-yaml": "~2.1.0",
    "restify": "^2.8.5",
    "swagger-tools": "^0.9.5",
    "underscore": "*"
  },
  "description": "Document your restify rest api by jsDoc or yaml.",
  "devDependencies": {
    "jshint": "*"
  },
  "gitHead": "92c50f33657acffb3173ff4125a2890dc28a016b",
  "homepage": "https://github.com/yourdelivery/swagger-restify#readme",
  "keywords": [
    "swagger",
    "swagger-ui",
    "restify",
    "api",
    "jsdoc",
    "yml",
    "yaml",
    "coffee-script",
    "restful"
  ],
  "main": "./index",
  "name": "swagger-restify",
  "optionalDependencies": {},
  "readme": "{swagger-restify}\n=========\nThis project is a fork of [swagger-restify](https://github.com/yourdelivery/swagger-restify)\nproject with Swagger compatibility improvements to make it possible to use it with\n[restify](http://mcavage.me/node-restify/) framework. This implementation also makes use of [swagger-tools](https://github.com/apigee-127/swagger-tools) to validate generated swagger specs.\n\n[Swagger](http://swagger.io/) is a specification and complete framework\nimplementation for describing, producing, consuming, and visualizing RESTful web services.\nView [demo](http://petstore.swagger.io/).\n\n__{swagger-restify}__ is a simple and clean solution to integrate swagger with restify.\n\n### Supported Swagger versions\n  - __1.0__\n  - __1.2__ (with validation)\n  - __2.0__ (with validation)\n\n## Installation\n\n    $ npm install vellotis/swagger-restify\n\n## Quick Start Swagger\n-  __[Quick Start Swagger v1.0 or v1.2](#quick-start-swagger-v1.X)__\n-  __[Quick Start Swagger v2.0](#quick-start-swagger-v2.0)__\n\n<a id=\"quick-start-swagger-v1.X\"></a>\n## Quick Start Swagger v1.0 or v1.2\n\nConfigure {swagger-restify}.\n\n\n`apiVersion`      -> Your api version.\n\n`swaggerVersion`  -> Swagger version.\n\n`swaggerUI`       -> Where is your swagger-ui?\n\n`swaggerURL`      -> Path to use for swagger ui web interface.\n\n`swaggerJSON`     -> Path to use for swagger ui JSON.\n\n`basePath`        -> The basePath for swagger.js\n\n`info`            -> [Metadata][info] about the API\n\n`apis`            -> Define your api array.\n\n`middleware`      -> Function before response.\n\n```js\nvar swagger = require('swagger-restify');\n\n  ...\n  swagger.init(server, {\n    apiVersion: '1.0',\n    swaggerVersion: '1.0', // or '1.2'\n    basePath: 'http://localhost:8080',\n    info: {\n      title: 'swagger-restify sample app',\n      description: 'Swagger + Restify = {swagger-restify}'\n    },\n    apis: ['./api.js', './api.yml'],\n    middleware: function(req, res){},\n    \n    // swagger-restify specific configuration\n    swaggerURL: '/swagger',\n    swaggerJSON: '/api-docs.json',\n    swaggerUI: './public'\n  });\n\n  server.listen(8080);\n  ...\n});\n```\n\n[info]: https://github.com/wordnik/swagger-spec/blob/master/versions/1.2.md#513-info-object\n\n### Read from JavaScript jsdoc\n\nExample 'api.js'\n\n```js\n\n/**\n * @swagger\n * resourcePath: /api\n * description: All about API\n */\n\n/**\n * @swagger\n * path: /login\n * operations:\n *   -  httpMethod: POST\n *      summary: Login with username and password\n *      notes: Returns a user based on username\n *      responseClass: User\n *      nickname: login\n *      consumes: \n *        - text/html\n *      parameters:\n *        - name: username\n *          description: Your username\n *          paramType: query\n *          required: true\n *          dataType: string\n *        - name: password\n *          description: Your password\n *          paramType: query\n *          required: true\n *          dataType: string\n */\nexports.login = function (req, res) {\n  var user = {};\n  user.username = req.params.username;\n  user.password = req.params.password;\n  res.json(user);\n}\n\n/**\n * @swagger\n * models:\n *   User:\n *     id: User\n *     properties:\n *       username:\n *         type: String\n *       password:\n *         type: String    \n */\n```\n\n### Read from yaml file\n\nExample 'api.yml'\n\n```yml\nresourcePath: /api\ndescription: All about API\napis: \n\n- path: /login\n  operations:\n\n  - httpMethod: POST\n    summary: Login with username and password\n    notes: Returns a user based on username\n    responseClass: User\n    nickname: login\n    consumes: \n      - text/html\n    parameters:\n\n    - name: username\n      dataType: string\n      paramType: query\n      required: true\n      description: Your username\n\n    - name: password\n      dataType: string\n      paramType: query\n      required: true\n      description: Your password\n\nmodels:\n    User:\n      id: User\n      properties:\n        username:\n          type: String\n        password:\n          type: String    \n```\n\n### Read from CoffeeScript jsdoc\n\nExample 'api.coffee'\n\n```coffee\n\n###\n * @swagger\n * resourcePath: /api\n * description: All about API\n###\n\n###\n * @swagger\n * path: /login\n * operations:\n *   -  httpMethod: POST\n *      summary: Login with username and password\n *      notes: Returns a user based on username\n *      responseClass: User\n *      nickname: login\n *      consumes:\n *        - text/html\n *      parameters:\n *        - name: username\n *          description: Your username\n *          paramType: query\n *          required: true\n *          dataType: string\n *        - name: password\n *          description: Your password\n *          paramType: query\n *          required: true\n *          dataType: string\n###\n\n###\n * @swagger\n * models:\n *   User:\n *     id: User\n *     properties:\n *       username:\n *         type: String\n *       password:\n *         type: String\n###\n```\n\n<a id=\"quick-start-swagger-v2.0\"></a>\n## Quick Start Swagger v2.0\n\nConfigure {swagger-restify}. All properties are as defined in [Swagger v2.0 Spec][user-content-swagger-object].\n\n`swagger`  -> Swagger version.\n\n`info`            -> [Metadata][info-v2.0] about the API. Only required properties showed here.\n\n > `version`      -> Your API version\n > \n > `title`        -> Your API title\n\n`host`            -> The host (name or ip) serving the API.\n\n`basePath`        -> The base path on which the API is served, which is relative to the host.\n\n`schemes`         -> The transfer protocol of the API. Look [Swagger v2.0 Spec][user-content-swagger-object].\n\n`consumes`        -> A list of MIME types the APIs can consume. This is global to all APIs but\n                     can be overridden on specific API calls.\n                     \n`produces`        -> A list of MIME types the APIs can produce. This is global to all APIs but\n                     can be overridden on specific API calls.\n\n`apis`            -> Array of relative or absolute paths for files to fetch annotations from. `paths` parameter\n                     will be generated from these files. As well `definitions` and `tags` will get fetched into global\n                     scope.\n                     \n`definitions`     -> An object to hold data types produced and consumed by operations. Look [Swagger Spec](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#definitionsObject) for more.\n\n`parameters`      -> Look swagger spec [Parameters Definitions Object](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#parametersDefinitionsObject).\n\n`responses`       -> Look swagger spec [Responses Definitions Object](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#responsesDefinitionsObject).\n\n`securityDefinitions` -> Look swagger spec [Security Definitions Object](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#securityDefinitionsObject).\n\n`security`        -> Look swagger spec [[Security Requirement Object]](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#securityRequirementObject).\n\n`tags`            -> A list of [[Tag Object]][tags-v2.0] used by the specification with additional metadata.\n\n`externalDocs`    -> Look swagger spec [External Documentation Object](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#externalDocumentationObject).\n\n`swaggerUI`       -> Where is your swagger-ui?\n\n`swaggerURL`      -> Path to use for swagger ui web interface.\n\n`swaggerJSON`     -> Path to use for swagger ui JSON. (Non swagger spec parameter. Required)\n\n`middleware`      -> Function that will be called before before Swagger serving. Can be a passport authentication.\n\n```js\nvar swagger = require('swagger-restify');\n\n  ...\n  swagger.init(server, {\n      swagger: '2.0', // or swaggerVersion as backward compatible\n      info: {\n          version: '1.0',\n          title: 'Swagger 2.0 Restify example'\n      },\n      tags: [\n          {\n              name: 'example',\n              description: 'Just an example API'\n          }\n      ],\n      host: 'localhost:' + port,\n      apis: ['./api.js', './api.coffee', './api.yml'],\n      produces: [\n          'application/json',\n          'text/xml'\n      ],\n      consumes: [\n          'application/json',\n          'text/xml'\n      ],\n  \n      // swagger-restify proprietary\n      swaggerURL: '/swagger',\n      swaggerJSON: '/api-docs.json',\n      swaggerUI: './public'\n  });\n\n  server.listen(8080);\n  ...\n});\n```\n[user-content-swagger-object]: https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#user-content-swagger-object\n[info-v2.0]: https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#infoObject\n[tags-v2.0]: https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#tagObject\n\n### Read from JavaScript jsdoc\n\nExample 'api.js'\n\n```js\n/**\n * @swagger\n * tags:\n *   - name: exampleJs\n *     description: All about API using JavaScript annotations\n * parameters:\n *   - name: username\n *     in: query\n *     description: Your username\n *     required: true\n *     type: string\n *     in: query\n *     description: Your password\n *     required: true\n *     type: string\n */\n\n/**\n * @swagger\n * path: /loginJs\n * httpMethod: POST\n * spec:\n *   summary: Login with username and password\n *   tags:\n *     - exampleJs\n *     - example\n *   description: Returns a user based on username\n *   operationId: loginJs\n *   consumes: \n *     - text/html\n *   responses:\n *     200:\n *       description: Successful response.\n *       schema:\n *         '$ref': '#/definitions/User'\n */\nexports.login = function (req, res, next) {\n  var user = {};\n  user.username = req.query.username;\n  user.password = req.query.password;\n  res.send(200, user);\n  next();\n};\n\n/**\n * @swagger\n * path: /helloJs\n * httpMethod: GET\n * spec:\n *   summary: Get hello message\n *   tags:\n *     - exampleJs\n *     - example\n *   description: 'Return \"Hello #{ name }!\" string'\n *   operationId: helloJs\n *   consumes: \n *     - text/html\n *   parameters:\n *     - name: name\n *       in: query\n *       description: Hello subject\n *       required: true\n *       type: string\n *   responses:\n *     200:\n *       description: Successful response.\n *       schema:\n *         type: string\n*/\nexports.hello = function (req, res, next) {\n  var name = req.query.name || 'unknown';\n  res.send(200, \"Hello \" + name + \"!\");\n  next();\n};\n\n/**\n * @swagger\n * definitions:\n *   User:\n *     required:\n *       - username\n *       - password\n *     properties:\n *       username:\n *         type: string\n *       password:\n *         type: string    \n */\n```\n\n### Read from yaml file\n\nExample 'api.yml'\n\n```yml\ntags:\n  - name: exampleYml\n    description: All about API using CoffeeScript annotations\nparameters:\n  - name: username\n    in: query\n    description: Your username\n    required: true\n    type: string\n  - name: password\n    in: query\n    description: Your password\n    required: true\n    type: string\n\n\n\n\npaths:\n  '/loginYml':\n    post:\n      summary: Login with username and password\n      tags:\n        - exampleYml\n        - example\n      description: Returns a user based on username\n      operationId: loginYml\n      consumes: \n        - text/html\n      responses:\n        200:\n          description: Successful response.\n          schema:\n            '$ref': '#/definitions/User'\n  '/helloYml':\n    get:\n      summary: Get hello message\n      tags:\n        - exampleYml\n        - example\n      description: 'Return \"Hello #{ name }!\" string'\n      operationId: helloYml\n      consumes: \n        - text/html\n      parameters:\n        - name: name\n          in: query\n          description: Hello subject\n          required: true\n          type: string\n      responses:\n        200:\n          description: 'Successful response'\n          schema:\n            type: string\n\n\n\n\ndefinitions:\n    User:\n      required:\n        - username\n        - password\n      properties:\n        username:\n          type: string\n        password:\n          type: string   \n```\n\n### Read from CoffeeScript jsdoc\n\nExample 'api.coffee'\n\n```coffee\n###\n * @swagger\n * tags:\n *   - name: exampleCoffee\n *     description: All about API using CoffeeScript annotations\n * parameters:\n *   - name: username\n *     in: query\n *     description: Your username\n *     required: true\n *     type: string\n *   - name: password\n *     in: query\n *     description: Your password\n *     required: true\n *     type: string\n###\n\n###\n * @swagger\n * path: /loginCoffee\n * httpMethod: POST\n * spec:\n *   summary: Login with username and password\n *   tags:\n *     - exampleCoffee\n *     - example\n *   description: Returns a user based on username\n *   operationId: loginCoffee\n *   consumes: \n *     - text/html\n *   responses:\n *     200:\n *       description: Successful response.\n *       schema:\n *         '$ref': '#/definitions/User'\n *       \n\n###\n\n###\n * @swagger\n * path: /helloCoffee\n * httpMethod: GET\n * spec:\n *   summary: Get hello message\n *   tags:\n *     - exampleCoffee\n *     - example\n *   description: 'Return \"Hello #{ name }!\" string'\n *   operationId: helloCoffee\n *   consumes: \n *     - text/html\n *   parameters:\n *     - name: name\n *       in: query\n *       description: Hello subject\n *       required: true\n *       type: string\n *   responses:\n *     200:\n *       description: Successful response.\n *       schema:\n *         type: string\n\n###\n\n###\n * @swagger\n * definitions:\n *   User:\n *     required:\n *       - username\n *       - password\n *     properties:\n *       username:\n *         type: string\n *       password:\n *         type: string    \n###\n```\n\n## Examples\n\nClone the {swagger-express} repo, then install the dev dependencies:\n\n    $ git clone git://github.com/vellotis/swagger-restify.git --depth 1\n    $ cd swagger-restify\n    $ npm install\n\nand run the example, where {version} is one of '1.0', '1.2', or '2.0':\n\n    $ cd examples\n    $ cd example_v{version}\n    $ node app.js\n    \n# Credits\n\n- [swagger-express](https://github.com/fliptoo/swagger-express)\n- [swagger-restify](https://github.com/yourdelivery/swagger-restify)\n- [swagger-tools](https://github.com/apigee-127/swagger-tools)\n- [Restify](http://mcavage.me/node-restify/)\n- [Express](https://github.com/visionmedia/express)\n- [swagger-jack](https://github.com/feugy/swagger-jack)\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2013 Fliptoo &lt;fliptoo.studio@gmail.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/yourdelivery/swagger-restify.git"
  },
  "scripts": {
    "postinstall": "bower install",
    "test": "jshint --config jshint.cfg $(find . -name *.js | grep -v './node_modules')"
  },
  "version": "1.1.1"
}
